{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "ReplicationConfiguration": {
                    "Role": "arn:aws:iam::123456789012:role/replication_role",
                    "Rules": [
                        {
                            "Id": "MyRule1",
                            "Status": "Enabled",
                            "Prefix": "MyPrefix",
                            "Destination": {
                                "Bucket": "arn:aws:s3:::my-replication-bucket",
                                "StorageClass": "STANDARD"
                            }
                        },
                        {
                            "Status": "Enabled",
                            "Prefix": "MyOtherPrefix",
                            "Destination": {
                                "Bucket": "arn:aws:s3:::my-replication-bucket"
                            }
                        }
                    ]
                }
            }
        }
    }
}


--JSON FORMATION TO CREATE vpc and subnet and route and internet gateway

{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This templete create VPC",
    "Resources": {
        "PubPrivateVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.10.0.0/16"
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                },
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.10.1.0/24",
                "MapPublicIpOnLaunch": true
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                },
                "AvailabilityZone": "us-east-1b",
                "CidrBlock": "10.10.2.0/24",
                "MapPublicIpOnLaunch": true
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                },
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.10.3.0/24",
                "MapPublicIpOnLaunch": false
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                },
                "AvailabilityZone": "us-east-1b",
                "CidrBlock": "10.10.4.0/24",
                "MapPublicIpOnLaunch": false
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "NatPublicIP",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatPublicIP",
                        "AllocationId"
                    ]
                }
            }
        },
        "NatPublicIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "PubPrivateVPC",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "PubPrivateVPC"
                }
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "NatGatewayId": {
                    "Ref": "NatGateway"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0"
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        }
    }
}


==============================EC2 Templete

{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description":"This templete create EC2 Instance",
    "Resources":{
        "Myec2Res":{
            "Type":"AWS::EC2::Instance",
           "Properties":{
               "AvailabilityZone":"us-east-1a",
               "ImageId":"ami-00c39f71452c08778",
               "InstanceType":"t2.micro",
               "KeyName":"connectionkeypair",
               "Tags":[{"Key":"Name","Value":"MyEc2"}]
           }
        }
    }
}



---->VPC Creation VPC and Public & Private Subnet and InternetGateway and NatGateway and RouteTable from YAML format

AWSTemplateFormatVersion: 2010-09-09
Description: This templete create VPC
Resources:
      ## VPC
      PubPrivateVPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: 10.10.0.0/16

      ## SUBNETS     
      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-1a
          CidrBlock: 10.10.1.0/24
          MapPublicIpOnLaunch: true
     
      PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-1b
          CidrBlock: 10.10.2.0/24
          MapPublicIpOnLaunch: true
     
      PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-1a
          CidrBlock: 10.10.3.0/24
          MapPublicIpOnLaunch: false
     
      PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: us-east-1b
          CidrBlock: 10.10.4.0/24
          MapPublicIpOnLaunch: false
     
     ## INTERNET GATEWAY
      InternetGateway:
        Type: AWS::EC2::InternetGateway
      
      GatewayToInternet:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId: !Ref PubPrivateVPC
          InternetGatewayId: !Ref InternetGateway
      
      ## PUBLIC ROUTING
      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
      
      PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: GatewayToInternet
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
     
      PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
     
      PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet2
          RouteTableId: !Ref PublicRouteTable
     
      ## NAT GATEWAY
      NatGateway:
        Type: AWS::EC2::NatGateway
        DependsOn: NatPublicIP
        Properties: 
          SubnetId: !Ref PublicSubnet1
          AllocationId: !GetAtt NatPublicIP.AllocationId

      ## ELASTIC IP
      NatPublicIP:
        Type: AWS::EC2::EIP
        DependsOn: PubPrivateVPC
        Properties:
          Domain: vpc
     
      ## PRIVATE ROUTING
      PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
      
      PrivateRoute:
        Type: AWS::EC2::Route
        Properties:
          NatGatewayId: !Ref NatGateway
          RouteTableId: !Ref PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
     
      PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet1
          RouteTableId: !Ref PrivateRouteTable
     
      PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet2
          RouteTableId: !Ref PrivateRouteTable
		  
		  
		  
---->CREATE EC2 INSTANCE 

{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description":"This templete create EC2 Instance",
    "Resources":{
        "CFinstance":{
            "Type":"AWS::EC2::Instance",
           "Properties":{
               "AvailabilityZone":"us-east-1a",
               "SubnetId":"subnet-044b2f51f6c28507a",
               "ImageId":"ami-00c39f71452c08778",
               "InstanceType":"t2.micro",
               "KeyName":"connectionkeypair",
               "Tags":[{"Key":"Name","Value":"CFinstance"}]
           }
        }
    }
}






